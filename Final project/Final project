{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Positive tweets percentage: 40 %\n",
      "Negative tweets percentage: 12 %\n",
      "Neutral tweets percentage: 46 %\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10f98bb90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "Positive tweets:\n",
      "RT @ESPNLosAngeles: Kobe event nets fitting $824K in jersey sales https://t.co/zgnYNpZZG6 #Lakers https://t.co/OLdJUQ2h90\n",
      "RT @BleacherReport: $824,000 worth of merchandise was sold on Kobe Bryant’s jersey retirement day https://t.co/BTE2AXrroy https://t.co/aoaz…\n",
      "RT @NBA2K_MyTEAM: Also, play two new Kobe Moments Challenges! Moments: Kobe’s Farewell rewards you a Ruby Kobe Bryant, and Moments: Kobe 81…\n",
      "$824,000 worth of merchandise was sold on Kobe Bryant’s jersey retirement... https://t.co/oc8cti5ZZn by… https://t.co/culhaXL5iK\n",
      "#WizKids #DCRising #WizardsTalk John Wall says Russell Westbrook is most like Kobe Bryant in today's game in o.. https://t.co/riC3LICwCW\n",
      "\n",
      "\n",
      "Negative tweets:\n",
      "RT @LakersNation: Kobe came in off the bench and hit a game-winner on this day in Lakers history.\n",
      "https://t.co/t8mDZFCxNJ https://t.co/nYQg…\n",
      "RT @go90Sports: WATCH: Kobe Bryant’s farewell to the game he loves in the animated short Dear Basketball.\n",
      "RT @LakersNation: Kobe single-handedly outscored the Mavericks in three quarters on this day in Lakers history.\n",
      "https://t.co/ptTrJmNMFK htt…\n",
      "RT @SNAI_Official: Nella notte, i Los Angeles Lakers hanno ritirato i due numeri di Kobe Bryant, segnando sempre di più il suo nome nella l…\n",
      "RT @shamanabots: I cant believe Kobe Bryant fucking illegal\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "import tweepy\n",
    "from tweepy import OAuthHandler\n",
    "from textblob import TextBlob\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    " \n",
    "class TwitterClient(object):\n",
    "    def __init__(self):\n",
    "        consumer_key = 'KgdYjhKeHCriADTdJ0uHRhfiY'\n",
    "        consumer_secret = '3nOXxsdF0f0pi9xZeKjEi3pnqFIK0uaiLqPOxwvPXsMu3MnFhh'\n",
    "        access_token = '2248216188-lWfyTkz5YwsIgz54j6gn6XFa0Hd3JKcfd4nCrEB'\n",
    "        access_token_secret = 'gfli08nvjOsnw0ts3qWGXXcnGg6c5mjFXCI0qegE6C5xm'\n",
    " \n",
    "        # authentication\n",
    "        try:\n",
    "            # create OAuthHandler object\n",
    "            self.auth = OAuthHandler(consumer_key, consumer_secret)\n",
    "            # set access token and secret\n",
    "            self.auth.set_access_token(access_token, access_token_secret)\n",
    "            # create tweepy API object to fetch tweets\n",
    "            self.api = tweepy.API(self.auth)\n",
    "        except:\n",
    "            print(\"Error: Authentication Failed\")\n",
    " \n",
    "    def clean_tweet(self, tweet):\n",
    "        return ' '.join(re.sub(\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\/\\/\\S+)\", \" \", tweet).split())\n",
    " \n",
    "    def get_tweet_sentiment(self, tweet):\n",
    "        analysis = TextBlob(self.clean_tweet(tweet))\n",
    "\n",
    "        if analysis.sentiment.polarity > 0:\n",
    "            return 'positive'\n",
    "        elif analysis.sentiment.polarity == 0:\n",
    "            return 'neutral'\n",
    "        else:\n",
    "            return 'negative'\n",
    " \n",
    "    def get_tweets(self, query, count = 10):\n",
    "\n",
    "        # empty list to store parsed tweets\n",
    "        tweets = []\n",
    " \n",
    "        try:\n",
    "            # call twitter api to fetch tweets\n",
    "            fetched_tweets = self.api.search(q = query, count = count)\n",
    " \n",
    "            # parsing tweets one by one\n",
    "            for tweet in fetched_tweets:\n",
    "                parsed_tweet = {}\n",
    "                parsed_tweet['text'] = tweet.text\n",
    "                parsed_tweet['sentiment'] = self.get_tweet_sentiment(tweet.text)\n",
    "\n",
    "                if tweet.retweet_count > 0:\n",
    "                    if parsed_tweet not in tweets:\n",
    "                        tweets.append(parsed_tweet)\n",
    "                else:\n",
    "                    tweets.append(parsed_tweet)\n",
    " \n",
    "            return tweets\n",
    " \n",
    "        except tweepy.TweepError as e:\n",
    "            # print error (if any)\n",
    "            print(\"Error : \" + str(e))\n",
    "def main():\n",
    "    # creating object of TwitterClient Class\n",
    "    api = TwitterClient()\n",
    "    # calling function to get tweets\n",
    "    tweets = api.get_tweets(query = 'kobe bryant', count = 1000)\n",
    "    ptweets = [tweet for tweet in tweets if tweet['sentiment'] == 'positive']\n",
    "    print(\"Positive tweets percentage: {} %\".format(100*len(ptweets)/len(tweets)))\n",
    "    ntweets = [tweet for tweet in tweets if tweet['sentiment'] == 'negative']\n",
    "    print(\"Negative tweets percentage: {} %\".format(100*len(ntweets)/len(tweets)))\n",
    "    print(\"Neutral tweets percentage: {} %\".format(100*(len(tweets) - len(ntweets) - len(ptweets))/len(tweets)))\n",
    "    \n",
    "    neg = int(format(100*len(ntweets)/len(tweets)))\n",
    "    neu = int(format(100*(len(tweets) - len(ntweets) - len(ptweets))/len(tweets)))\n",
    "    pos = int(format(100*len(ptweets)/len(tweets)))\n",
    "    x = [neg,neu,pos]\n",
    "    y = [1,2,3]\n",
    "    label = ['Negative','Neutral','Positive']\n",
    "    plt.yticks(y,label)\n",
    "    plt.title('Attitudes Random Secearch on Twitter Analysis ')\n",
    "    plt.xlabel('Tweet type')\n",
    "    plt.ylabel('Attitude')\n",
    "    plt.bar(x,y)\n",
    "    plt.show()\n",
    "    \n",
    "\n",
    "    print(\"\\n\\nPositive tweets:\")\n",
    "    for tweet in ptweets[:5]:\n",
    "        print(tweet['text'])\n",
    " \n",
    "\n",
    "    print(\"\\n\\nNegative tweets:\")\n",
    "    for tweet in ntweets[:5]:\n",
    "        print(tweet['text'])\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
